// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  name                String
  image               String
  googleId            String?
  password            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  email               Email[]
  book                Book[]
  Comment             Comment[]
  notifications       Notification[] @relation("UserNotifications")
  personNotifications Notification[] @relation("PersonNotifications")
  like                Like[]
}

model Email {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  emailVerifiedAt DateTime?
  isPrimary       Boolean
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          Int
}

model Book {
  id          Int       @id @default(autoincrement())
  name        Json
  author      Json
  description Json
  image       String
  date        String
  budget      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int
  quote       Quote[]
  tag         Tag[]
  bookTag     BookTag[]
}

model Quote {
  id           Int            @id @default(autoincrement())
  quote        Json
  image        String
  book         Book           @relation(fields: [bookId], references: [id])
  bookId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  comment      Comment[]
  like         Like[]
  Notification Notification[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String   @db.Text
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  quote     Quote    @relation(fields: [quoteId], references: [id])
  quoteId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int       @id @default(autoincrement())
  tag       Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  book      Book[]
  bookTag   BookTag[]
}

model BookTag {
  book   Book @relation(fields: [bookId], references: [id])
  bookId Int
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([bookId, tagId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  isNew     Boolean
  isComment Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quote     Quote    @relation(fields: [quoteId], references: [id])
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  person    User     @relation("PersonNotifications", fields: [personId], references: [id])
  userId    Int
  personId  Int
  quoteId   Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  quote     Quote    @relation(fields: [quoteId], references: [id])
  quoteId   Int
}
